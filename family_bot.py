from data_family import read_family_data, write_family_data
from datetime import datetime
from aiogram import types, Bot, Dispatcher
import asyncio

# CSV-—Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ–º—å—è—Ö
FAMILIES_DATA_FILE = 'family.csv'

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–µ–º—å—è—Ö
def create_family(husband_username, wife_username, wedding_date):
    families = read_family_data()
    families.append({'husband': husband_username, 'wife': wife_username, 'wedding_date': wedding_date})
    write_family_data(families)

def divorce_family(husband_username, wife_username):
    families = read_family_data()
    families = [family for family in families if family['husband'] != husband_username or family['wife'] != wife_username]
    write_family_data(families)

def get_all_families():
    families = read_family_data()
    return families

def congratulate_families_on_anniversary():
    today = datetime.now()
    families = read_family_data()
    for family in families:
        wedding_date = datetime.strptime(family['wedding_date'], '%d-%m-%Y')
        if today.day == wedding_date.day and today.month == wedding_date.month:
            husband_username = family['husband']
            wife_username = family['wife']
            message = f"–î–æ—Ä–æ–≥–∏–µ @{husband_username} –∏ @{wife_username}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –≥–æ–¥–æ–≤—â–∏–Ω–æ–π —Å–≤–∞–¥—å–±—ã! üéâ"
            bot.send_message(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def handle_wedding(message: types.Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏
    if len(message.text.split()) != 3:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /wedding @–º—É–∂ @–∂–µ–Ω–∞")
        return

    husband_username = message.text.split()[1]
    wife_username = message.text.split()[2]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—É–∂ –∏ –∂–µ–Ω–∞ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if husband_username == wife_username:
        await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∂–µ–Ω–∏—Ç—å—Å—è —Å–∞–º–∏ –Ω–∞ —Å–µ–±–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–µ–º—å–µ
    families = get_all_families()
    for family in families:
        if husband_username in [family['husband'], family['wife']] or wife_username in [family['husband'], family['wife']]:
            await message.reply("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∂–µ–Ω–∏—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
            return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏ –∫–∞–∫ –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    wedding_date = message.date.strftime('%d-%m-%Y')

    create_family(husband_username, wife_username, wedding_date)
    await message.reply(f"–°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞ –º–µ–∂–¥—É {husband_username} –∏ {wife_username} üéâüéâüéâ")


async def handle_divorce(message: types.Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–≤–æ–¥–∞ —Å–µ–º—å–∏
    if len(message.text.split()) != 3:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /divorce @–º—É–∂ @–∂–µ–Ω–∞")
        return
    husband_username = message.text.split()[1]
    wife_username = message.text.split()[2]
    divorce_family(husband_username, wife_username)
    await message.reply(f"–°–µ–º—å—è –º–µ–∂–¥—É {husband_username} –∏ {wife_username} —Ä–∞–∑—Ä—É—à–µ–Ω–∞üíîüíîüíî")

async def handle_family(message: types.Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Å–µ–º–µ–π
    families = get_all_families()
    if not families:
        await message.reply("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–µ–º–µ–π.")
    else:
        family_list = "\n".join([f"{family['husband']} - {family['wife']} –≤–º–µ—Å—Ç–µ c {family['wedding_date']}" for family in families])
        await message.reply(f"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ–º–µ–π:\n{family_list}")

# –ù–∞—á–∞–ª–æ –±–æ—Ç–∞
if __name__ == '__main__':
    from config import TELEGRAM_TOKEN

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=TELEGRAM_TOKEN)
    dp = Dispatcher(bot)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    dp.message_handler(commands=['wedding'])(handle_wedding)
    dp.message_handler(commands=['divorce'])(handle_divorce)
    dp.message_handler(commands=['family'])(handle_family)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(dp.start_polling())